{"version":3,"sources":["ipl2020.jfif","components/EntryForm.module.css","components/EntryForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EntryForm","formSubmit","nameInput","teamInput","handleNameChange","handleTeamChange","className","styles","placeholder","value","name","onChange","type","onClick","e","defaultProps","MainTable","props","setState","state","ent","target","console","log","team","list","some","item","toLowerCase","idx","findIndex","fetch","then","response","json","data","entries","tableEntries","map","entry","i","key","this","TableRow","React","Component","App","id","src","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b085ffb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ipl2020.227bb238.jfif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EntryForm\":\"EntryForm_EntryForm__Mgl4v\"};","import React from 'react';\nimport styles from './EntryForm.module.css';\n\n\nconst EntryForm = ({formSubmit,nameInput, teamInput,handleNameChange,handleTeamChange}) => (\n  <div className={styles.EntryForm}>\n    <h3>MI vs CSK</h3>\n    <p>Enter your prediction</p>\n    \n    <input placeholder=\"Name\" value={nameInput} name=\"Name\" onChange={handleNameChange}></input>\n    <input placeholder=\"Team\" value={teamInput} name=\"Team\" onChange={handleTeamChange}></input>\n    <div><button type=\"submit\" onClick={(e)=>{formSubmit(nameInput,teamInput)}}>Submit</button></div>\n    \n  </div>\n);\n\nEntryForm.propTypes = {};\n\nEntryForm.defaultProps = {};\n\nexport default EntryForm;\n","import React from 'react';\nimport logo from './ipl2020.jfif';\nimport './App.css';\nimport EntryForm from './components/EntryForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <div id=\"test\" className=\"App-body\">\n          <img src={logo}  />\n          <div id=\"form1\">\n          </div>\n          <MainTable />\n          \n      </div>\n    </div>\n    \n  )\n}\n\n\nclass MainTable extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = { ent : [ ] ,\n                  nameInput : \"\",\n                  teamInput : \"\"\n              }\n\n  }\n  handleNameChange = (e)  => {\n    this.setState({\n      ...this.state.ent,\n      ...this.state.teamInput,\n      nameInput : e.target.value\n    })\n    console.log(this.state.nameInput)\n  }\n  handleTeamChange = (e)  => {\n    this.setState({\n      ...this.state.ent,\n      ...this.state.nameInput,\n      teamInput : e.target.value\n    })\n    console.log(this.state.teamInput)\n  }\n  \n  componentDidMount(){\n    const apiUrl = '/api/entries';\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('This is your data', data);\n        this.setState((state)=>{\n          return{\n            ent : data,\n            nameInput : '',\n            teamInput : ''\n\n          }\n        })\n      } )\n  }\n\n\n  TableRow(props) {  \n    // console.log(\"Tbale row\",props)\n    const entries = props.entries\n    console.log(\"Entries\",entries)\n     const tableEntries = entries.map((entry,i)=>\n       <tr key={i}><td>{entry.name}</td><td>{entry.team}</td></tr>\n     )\n    \n    return (\n         <tbody >{tableEntries}</tbody>\n      )\n  } \n\n  formSubmit = (name,team) =>{\n     console.log(\"How this is clicking\",name,team)\n    //  const entries = this.state.ent;\n    //  entries.push({name:team});\n    console.log(\"Before\",this.state)\n     this.setState((state)=> {\n       let list = state.ent\n       if( list.some(item=> item.name.toLowerCase()===name.toLowerCase())){\n         var idx = list.findIndex(item=>item.name.toLowerCase() === name.toLowerCase())\n          list[idx] = { name: list[idx].name,team: team}\n        //  item.teamInput = state.teamInput\n       }\n       else{\n         list = [...state.ent,{\"name\":state.nameInput,\"team\":state.teamInput}];\n       }\n      return {\n        ent : list,\n        nameInput : '',\n        teamInput : ''\n      }\n     })\n       \n     console.log(\"After\",this.state)\n  }\n\n  render(){\n    return (\n      <div>\n       <EntryForm formSubmit={this.formSubmit} nameInput={this.state.nameInput} teamInput={this.state.teamInput}  handleNameChange={this.handleNameChange} handleTeamChange={this.handleTeamChange}></EntryForm>\n        <br />\n        <br />\n        <table >\n          <thead >\n          <tr><th >Name</th><th >Team</th></tr>\n          </thead>\n          <this.TableRow entries={this.state.ent}></this.TableRow>\n          \n        </table>\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}