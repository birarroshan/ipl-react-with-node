{"version":3,"sources":["ipl2020.jfif","components/EntryForm.module.css","components/EntryForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EntryForm","formSubmit","nameInput","teamInput","handleNameChange","handleTeamChange","team1","team2","className","styles","placeholder","value","name","onChange","type","disabled","onClick","e","defaultProps","MainTable","props","setState","state","ent","target","console","log","team","Date","getHours","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","alert","entries","forEach","element","push","tableEntries","map","entry","i","key","this","TableRow","React","Component","App","id","src","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c590572.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ipl2020.227bb238.jfif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EntryForm\":\"EntryForm_EntryForm__Mgl4v\"};","import React from 'react';\nimport styles from './EntryForm.module.css';\n\n\nconst EntryForm = ({formSubmit,nameInput, teamInput,handleNameChange,handleTeamChange,team1,team2}) => (\n  \n  <div className={styles.EntryForm}>\n    <h3>{team1} vs {team2}</h3>\n    <p>Enter your prediction</p>\n    \n    <input placeholder=\"Name\" value={nameInput} name=\"Name\" onChange={handleNameChange}></input>\n    <select name=\"Team\" value={teamInput} onChange={handleTeamChange} >\n        <option value =\"select\" >--Select--</option>\n        <option value={team1}>{team1}</option>\n        <option value={team2}>{team2}</option>\n    </select>\n    <div><button type=\"submit\" disabled={ teamInput==='--select--' || teamInput==='' || nameInput===''  } onClick={(e)=>{formSubmit(nameInput,teamInput)}}>Submit</button></div>\n    \n  </div>\n\n);\n\nEntryForm.propTypes = {};\n\nEntryForm.defaultProps = {};\n\nexport default EntryForm;\n","import React from 'react';\nimport logo from './ipl2020.jfif';\nimport './App.css';\nimport EntryForm from './components/EntryForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <div id=\"test\" className=\"App-body\">\n          <img src={logo}  />\n          <div id=\"form1\">\n          </div>\n          <MainTable />\n          \n      </div>\n    </div>\n    \n  )\n}\n\n\nclass MainTable extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = { ent : [ ] ,\n                  nameInput : \"\",\n                  teamInput : \"\",\n                  team1 : \"\",\n                  team2 : \"\"\n              }\n\n  }\n\n  handleNameChange = (e)  => {\n    this.setState({\n      ...this.state.ent,\n      ...this.state.teamInput,\n      ...this.state.team1,\n      ...this.state.team2,\n      nameInput : e.target.value\n    })\n    console.log(this.state.nameInput)\n  }\n  handleTeamChange = (e)  => {\n    this.setState({\n      ...this.state.ent,\n      ...this.state.nameInput,\n      ...this.state.team1,\n      ...this.state.team2,\n      teamInput : e.target.value\n    })\n    console.log(this.state.teamInput)\n  }\n  \n  componentDidMount(){\n    const apiUrlPlayer = '/api/players';\n    const apiUrl = '/api/entries';\n    const apiUrlMatch = '/api/matches';\n      fetch(apiUrlPlayer)\n        .then((response) => response.json())\n        .then((data) => {\n          console.log('This is player data', data);\n          this.setState((state)=>{\n            return{\n              ...this.state.ent,\n              ...this.state.nameInput,\n              ...this.state.teamInput,\n              team1 : data.team1,\n              team2 : data.team2 \n            }\n          })\n    \n          // First request done - \n           \n            return fetch(apiUrl)\n           .then((response) => response.json())\n             .then((data) => {\n             console.log('This is entries data', data);\n                this.setState((state)=>{\n                  return{\n                       ...this.state.team1,\n                       ...this.state.team2,\n                       ent : data,\n                       nameInput : '',\n                       teamInput : ''\n                   }\n                   })\n\n\n                   // Second Call done \n                   return   fetch(apiUrlMatch)\n                   .then((response) => response.json())\n                   .then((data) => {\n                     console.log('This is Match Data', data);\n                     this.setState((state)=>{\n                       return{\n                         ...this.state.ent,\n                         ...this.state.nameInput,\n                         ...this.state.teamInput,\n                         team1 : data.team1,\n                         team2 : data.team2 \n                       }\n                     })\n                   })\n            })\n          })\n  }\n\n\n  TableRow(props) {  \n    // console.log(\"Tbale row\",props)\n    const entries = [];\n    props.entries.forEach(element => {\n      if (element.team != \"\"){\n        element. team = 'Voted'\n        entries.push(element);\n      }\n    });\n    console.log(\"Entries\",entries)\n     const tableEntries = entries.map((entry,i)=>\n       <tr key={i}><td>{entry.name}</td><td>{ }</td><td>0</td> </tr>\n     )\n    \n    return (\n         <tbody >{tableEntries}</tbody>\n      )\n  } \n\n  formSubmit = (name,team) =>{\n    console.log(\"Before\",this.state);\n    //  const entries = this.state.ent;\n    var date = new Date();\n    if (date.getHours()<19 ){\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name: name, team : team })\n  };\n  fetch('/api/entries', requestOptions)\n      .then(response => response.json())\n      .then(data => \n        \n        this.setState((state)=> {\n          // let list = data\n          // if( list.some(item=> item.name.toLowerCase()===name.toLowerCase())){\n          //   var idx = list.findIndex(item=>item.name.toLowerCase() === name.toLowerCase())\n          //    list[idx] = { name: list[idx].name,team: team}\n          //  //  item.teamInput = state.teamInput\n          // }\n          // else{\n          //   list = [...state.ent,{\"name\":state.nameInput,\"team\":state.teamInput}];\n          // }\n         return {\n           ent : data,\n           nameInput : '',\n           teamInput : '',\n           team1 : state.team1,\n           team2 : state.team2\n         }\n        })\n         \n        \n        );\n    \n    //  entries.push({name:team});\n\n    \n\n     console.log(\"After\",this.state)\n      }else{\n        alert(\"Submission Time is over\");\n      }\n  }\n\n  render(){\n    return (\n      <div>\n       <EntryForm formSubmit={this.formSubmit} nameInput={this.state.nameInput} teamInput={this.state.teamInput}  handleNameChange={this.handleNameChange} handleTeamChange={this.handleTeamChange} \n       team1={this.state.team1}   team2={this.state.team2}></EntryForm>\n        <br />\n        <br />\n        <table >\n          <thead >\n          <tr><th >Name</th><th >Team</th><th>Score</th></tr>\n          </thead>\n          <this.TableRow entries={this.state.ent}></this.TableRow>\n          \n        </table>\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}